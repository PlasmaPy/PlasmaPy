[tox]
envlist = clean,py38,build_docs
isolated_build = True
indexserver =
    NIGHTLY = https://pypi.anaconda.org/scipy-wheels-nightly/simple

[testenv]
allowlist_externals =
    /bin/bash
    /usr/bin/bash
    echo
setenv =
    MPLBACKEND = agg
    COLUMNS = 180
    PYTEST_COMMAND = pytest --pyargs plasmapy --durations=25 --showlocals -n=auto --dist=loadfile
extras = tests
deps =
    astropydev: git+https://github.com/astropy/astropy
    matplotlibdev: git+https://github.com/matplotlib/matplotlib
    numpydev: :NIGHTLY:numpy
    sphinxdev: git+https://github.com/sphinx-doc/sphinx
    xarraydev: git+https://github.com/pydata/xarray
    cov: pytest-cov
    !minimal: pytest-xdist
    pytest-github-actions-annotate-failures
commands =
    !cov: {env:PYTEST_COMMAND} {posargs} -m 'not slow'
    all: {env:PYTEST_COMMAND} {posargs}
    cov-all: {env:PYTEST_COMMAND} {posargs} --cov=plasmapy --cov-report=xml --cov-config={toxinidir}{/}setup.cfg --cov-append --cov-report xml:coverage.xml
description =
    run tests
    astropydev: with the development version of astropy
    matplotlibdev: with the development version of matplotlib
    numpydev: with the development version of numpy
    sphinxdev: with the development version of sphinx
    xarraydev: with the development version of xarray
    minimal: with minimal versions of dependencies
    cov: with code coverage

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:build_docs]
changedir = {toxinidir}
extras = docs
setenv =
    HOME = {envtmpdir}
commands = sphinx-build docs docs{/}_build{/}html -W -n --keep-going -b html {posargs}

[testenv:build_docs-sphinxdev]
changedir = {toxinidir}
extras = docs
setenv =
    HOME = {envtmpdir}
commands = sphinx-build docs docs{/}_build{/}html -W -n --keep-going -b html {posargs}
deps =
    git+https://github.com/sphinx-doc/sphinx
description =
    sphinxdev: with the development version of sphinx

[testenv:build_docs_no_examples]
changedir = {toxinidir}
extras = docs
setenv =
    HOME = {envtmpdir}
commands = sphinx-build -D nbsphinx_execute='never' docs docs{/}_build{/}html -b html {posargs}

# This env requires tox-conda.
[testenv:py38-conda]
basepython = python3.8
extras =
deps =
    lmfit
    pytest-cov
    pytest-xdist
conda_deps =
    astropy >= 4.3.1
    h5py >= 3.0.0
    matplotlib
    mpmath
    numpy >= 1.20.0
    numpydoc
    pillow
    pytest >= 5.4.0
    scipy >= 1.5.0
    sphinx
    sphinx_rtd_theme

# This env tests minimal versions of each dependency.
[testenv:py38-all-minimal]
basepython = python3.8
extras = tests
deps =
    astropy == 5.0.1
    cached-property == 1.5.2
    ipywidgets == 7.6.5
    h5py == 3.0.0
    hypothesis
    lmfit == 1.0.0
    matplotlib == 3.3.0
    mpmath == 1.2.1
    numba
    numpy == 1.19.0
    pandas == 1.0.0
    pillow
    pytest == 5.4.0
    pytest-cov
    pytest-regressions
    scipy == 1.5.0
    tqdm == 4.41.0
    voila == 0.2.15
    xarray == 0.15.0
    requests >= 2.27.1
setenv =
    PYTEST_COMMAND = pytest --pyargs plasmapy --durations=25 --showlocals

[testenv:linters]
deps =
    cffconvert
    dlint
    flake8
    flake8-absolute-import
    flake8-builtins
    flake8-comments
    flake8-implicit-str-concat
    flake8-mutable
    flake8-rst-docstrings
    flake8-simplify
    flake8-use-fstring
    flake8-use-pathlib
    pydocstyle
    pygments
    tryceratops
commands =
    flake8 --bug-report
    flake8 {toxinidir}{/}plasmapy --count --show-source --statistics
    cffconvert --validate

[testenv:py38-minimal-pypi-import]
basepython = python3.8
extras =
deps =
commands = python -c 'import plasmapy'

[testenv:codespell]
deps =
    codespell
commands_pre =
    echo
    echo "Codespell finds typos in source code. Rather than checking if each word"
    echo "matches a dictionary entry, it looks for a set of common misspellings"
    echo "in order to reduce the number of false positives."
    echo
commands =
    codespell .
commands_post =
    echo
    echo "After codespell has been installed locally (`pip install codespell`),"
    echo "running the command `codespell -i 2 -w` will interactively go through"
    echo "misspellings and suggest one or more replacements. Add any false"
    echo "positives under ignore-words-list under [codespell] in setup.cfg."
